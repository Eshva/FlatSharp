// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatSharpTests.Oracle
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MyTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MyTable GetRootAsMyTable(ByteBuffer _bb) { return GetRootAsMyTable(_bb, new MyTable()); }
  public static MyTable GetRootAsMyTable(ByteBuffer _bb, MyTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool MyTableBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "Foo "); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MyTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatSharpTests.Oracle.MyTable> CreateMyTable(FlatBufferBuilder builder,
      int Value = 0) {
    builder.StartTable(1);
    MyTable.AddValue(builder, Value);
    return MyTable.EndMyTable(builder);
  }

  public static void StartMyTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, int Value) { builder.AddInt(0, Value, 0); }
  public static Offset<FlatSharpTests.Oracle.MyTable> EndMyTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatSharpTests.Oracle.MyTable>(o);
  }
  public static void FinishMyTableBuffer(FlatBufferBuilder builder, Offset<FlatSharpTests.Oracle.MyTable> offset) { builder.Finish(offset.Value, "Foo "); }
  public static void FinishSizePrefixedMyTableBuffer(FlatBufferBuilder builder, Offset<FlatSharpTests.Oracle.MyTable> offset) { builder.FinishSizePrefixed(offset.Value, "Foo "); }
};


}
